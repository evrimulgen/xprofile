GATOR User Guide
================

Overview
--------

GATOR is a Pro*g*ram *A*nalysis *T*oolkit F*o*r And*r*oid. It requires
a Unix-like operating system to run, and has been tested on both
Ubuntu 14.04 and Mac OS X 10.9. The toolkit takes as input either Java
bytecode or APK files. APK files need to be preprocessed to Java
bytecode with dex2jar (https://code.google.com/p/dex2jar/), as
described below. The Java bytecode is processed with the Soot program
analysis framework (http://www.sable.mcgill.ca/soot/). GATOR's
analyses are built on top of Soot.

This release (version 1.2) includes the source code for the GUI
analysis described in Chapter 5 of Dacong Yan's Ph.D. dissertation (an
extended version of our CGO'14 paper), and the Android programs used
in the experiments from this work. Additional static analyses will be
added to GATOR in the near future. The directory structure is as
follows:

- README: this file

- LICENSE: license for the software components developed at OSU: (1)
GATOR, and (2) accompanying scripts to run the analysis.

- SootAndroid: source code for the GUI analysis component of GATOR

- AndroidBench: Android programs used in our experiments, and
dependent Android platform JAR files. Note: In order to reduce the
download size, we only include one Android program (APV) in this
archive (gator-1.2). The remaining 19 Android programs used in the
CGO'14 paper can be downloaded from a separate archive bench-1.2 at
http://web.cse.ohio-state.edu/presto/software/gator/

- apk-preprocess-tool: a tool to preprocess APK files to make them
suitable for analysis with GATOR

What's New
----------

Compared to GATOR version 1.1, the changes are:

1) Handling of APK files

2) Minor fixes/extensions in the analysis and the app configurations

3) Splitting the analysis and the benchmark Android programs into two
packages (gator-1.2 and bench-1.2), in order to reduce download size

Prerequisite Setup
------------------

1. JDK 1.6+

Refer to http://www.oracle.com/technetwork/java/index.html for details
of how to obtain a copy of the JDK

2. Eclipse

You can obtain a copy of Eclipse from http://www.eclipse.org/downloads

3. Android SDK

Android SDK is required to run GATOR. It can be downloaded from
http://developer.android.com/sdk/index.html. After the SDK is
installed, support files for individual API levels should be installed
as well. For example, if you want to analyze an Android application
developed for API level 17, support files for android-4.2.2 must be
installed. To do that, you can use the Android SDK manager, whose
documentation can be found at
http://developer.android.com/tools/help/sdk-manager.html.


Usage
-----

1. Compile GATOR

There are two ways to compile GATOR: (1) you can import the project
rooted at SootAndroid directory into Eclipse; or (2) you can use
Apache ant http://ant.apache.org to compile the project.

2. Use the analysis

You can use the script "SootAndroid/scripts/guiAnalysis.sh" to run the
analysis. (Note: a wrapper script, which invokes this script on each
application from the CGO'14 paper, is described below under
"3. Analyze the provided programs". If this is your first time running
Gator, you may want to jump straight to Section 3.)

Five command line arguments need to be specified, in order:

- Full path to the AndroidBench directory. Suppose the GATOR root
directory is $GatorRoot; this argument should be
$GatorRoot/AndroidBench. This is needed because directory "platform"
under AndroidBench contains relevant jar files for several versions of
the Android platform. These jar files are needed as input to
Soot. Important: If you need to support additional platform versions,
you need to add the relevant files under AndroidBench/platform. Please
examine this directory for details.

- Full path to the root directory of the installed Android SDK. This
is needed, for example, to access platform-defined XML layout files.

- Full path to the root directory of the Android program to be
analyzed. Currently, we assume the program is developed using Eclipse
ADT, and thus further assume the project structure used by Eclipse
ADT.

- Android platform version string. For example, android-10 is the
string to be used for the APV program. This string should be
consistent with the target field in the project.properties file
located at the root directory of the Android program. In future, we
will support cases when the specified version is newer than the one in
the project.properties files. 

- Name of the Android program. This is only for output purpose, and
you can use any name of your choice.

Example:

  $ SootAndroid/scripts/guiAnalysis.sh \
      /path/to/AndroidBench \
      /path/to/AndroidSDK \
      /path/to/HelloAndroidProject \
      android-10 \
      HelloAndroid

By default, the GUI analysis is executed and then some basic
measurements are printed. Clients can be developed to make use of the
result of the GUI analysis and perform additional measurements and
analyses. Here are commands to run two built-in clients.

Gather results shown in the tables of Chapter 5 of Dacong Yan's
dissertation:

  $ SootAndroidOptions="-client Ch5Client" SootAndroid/scripts/guiAnalysis.sh ...

Print GUI hierarchy structures for activities, dialogs, and menus:

  $ SootAndroidOptions="-client GUIHierarchyPrinterClient" SootAndroid/scripts/guiAnalysis.sh ...

Run both clients:

  $ SootAndroidOptions="-client Ch5Client -client GUIHierarchyPrinterClient" ...

For instructions of developing new analyses on top of our GUI
analysis, please see Section "Extending GATOR".

3. Analyze the provided programs

Android programs used for our experiments are provided in the
AndroidBench directory. Each program is packaged as a zip package. If
you are interested in reading the source code, you can import the zip
package as a project into Eclipse, or simply uncompress the package
and read the files using your favorite text editor.

In order to reduce the overall size of this package, only one Android
program, (APV) is included in the AndroidBench directory in archive
gator-1.2. The remaining 19 programs from the CGO'14 paper are
available at http://web.cse.ohio-state.edu/presto/software/gator in a
separate package bench-1.2. Download and uncompress this benchmark
package. Each benchmark directory from it (e.g., KeePassDroid) should
be placed under directory AndroidBench.

To analyze these programs, you can use the provided script
AndroidBench/guiAnalysis.sh. The script unzips the program (if
necessary) and invokes SootAndroid/scripts/guiAnalysis.sh (which was
described above) with the appropriate parameters.

The script needs only one argument - name of the program to
analyze. All supported options are "apv astrid connectbot fbreader
keepassdroid k9 vlc vudroid tippytipper openmanager notepad mytracks
barcodescanner sipdroid xbmc npr mileage opensudoku beem
supergenpass". If you do not merge the 19 Android programs from the
separate package bench-1.2 into the AndroidBench directory, only "apv"
will work as a script parameter. Before you use the script, two
environment variables must be configured. First, GatorRoot env var
should point to the root directory of your GATOR installation. Second,
ADK env var should point to the root directory of your Android SDK
installation. Alternatively, you can change the default values in the
script and hard-code the path values specific to your environment.
benchmark package

Example:
  $ AndroidBench/guiAnalysis.sh            # Print out usage message
  $ AndroidBench/guiAnalysis.sh apv        # Analyze apv
  $ AndroidBench/guiAnalysis.sh apv astrid # Analyze apv and astrid

You can run additional clients the same way as described in the
previous section by setting the SootAndroidOptions env var.


Extending GATOR
---------------

The output of the GUI analysis is accessible programmatically via APIs
defined in presto.android.gui.GUIAnalysisOutput. Examples of these
outputs include:

- The set of activities in an Android program, and the main activity.

- Given an activity, its root views and the whole GUI hierarchy
attached to the activity.

- Given an activity, its associated options menu and associated event
handlers.

- The set of dialogs in the program, and the GUI hierarchy of each
dialog.

- Given a dialog, the statements that show or dismiss it.

- Given a view, the set of supported events and their corresponding
event handlers.

- Given a view, its associated context menus and corresponding event
handlers.

- A querying interface that can give you possible values for
GUI-related variables, i.e. variables representing activities, views,
listeners, and view/layout IDs.

- Given a statement, what is the corresponding operation node in the
constraint graph (if any).

- The set of operation nodes, and variable value solution sets for
given operation nodes.

As mentioned earlier, two example clients are provided:
presto.android.gui.clients.Ch5Client and
presto.android.gui.clients.GUIHierarchyPrinterClient.

To plug in your own code (code that makes use of our analysis output
and performs additional analysis), you can add a new subclass
MyCoolClient of GUIAnalysisClient in the presto.android.gui.clients
package, and run it with

  $ SootAndroidOptions="-client MyCoolClient" /path/to/guiAnalysis.sh ...

Analysis of APKs
----------------

To analyze an APK file with GATOR, the file should first be
preprocessed as follows: change to apk-preprocess-tool and use

./scripts/convert.sh absolute-path-to-the-APK-file

The script invokes two additional tools:

(1) dex2jar: https://code.google.com/p/dex2jar/
(2) apktool: https://code.google.com/p/android-apktool/ 

Both tools are included in the distribution of GATOR, in directory
apk-preprocess-tool.

The output of this preprocessing is a directory under the
apk-preprocess-tool directory, with name "[apk file base
name]forEclipseProject". The directory structure is consistent with
the project structure used by Eclipse ADT, and can be used as input to
the guiAnalysis.sh script. The directory can then be renamed and moved
to AndroidBench.



